global !p

class Arg:
	def __init__(self, arg):
		self.name = ""
		self.type = ""
		self.value = ""
		if ':' in arg:
			name, rest = arg.split(':')
			self.name = name.strip()
			if '=' in arg:
				arg_type, value = rest.strip().split('=')
				self.type = arg_type.strip()
				self.value = value.strip()
			else:
				self.type = rest.strip()
		elif '=' in arg:
			name, value = arg.split('=')
			self.name = name.strip()
			self.type = ""
			self.value = value.strip()
		else:
			self.name = arg.strip()
			self.type = ""
			self.value = ""

	@property
	def doc_string(self):
		if self.type:
			return f"{self.name} : {self.type}"
		else:
			return self.name

def get_args(arg_string):
	args = [Arg(arg) for arg in arg_string.split(',') if not arg.isspace() and arg]
	return args

def write_docstring_args(args, snip):
	snip >> 2
	args = get_args(args)
	for i, arg in enumerate(args):
		snip += arg.doc_string

endglobal

snippet test_snip "Test Snippet" b
# Testing `date`
endsnippet

snippet class" "Custom class definition with docstring"
class ${1:ClassName}(${2:ClassParent}):
	"""
		${3:Docstring for ClassName}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Parameters
		----------`!p write_docstring_args(t[4], snip)``!p snip.rv += '\n' + snip.mkline('', indent='')`
		Attributes
		----------
	"""

	def __init__(self, $4) -> None:
		`!p
snip.rv = ''
if t[2]:
	snip.rv += 'super().__init__(' + t[4] + ')'`$0
endsnippet

snippet def" "Custom function definition with docstring"
def ${1:function}(${2:args}) -> ${3:rettype}:
	"""
		${4:Docstring for function}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Parameters
		----------`!p write_docstring_args(t[2], snip)``!p snip.rv += '\n' + snip.mkline('', indent='')`
		Returns
		-------
		$3
	"""
	${0:pass}
endsnippet

snippet defmethod "Custom method definition with docstring"
def ${1:method}(self, ${2:args}) -> ${3:rettype}:
	"""
		${4:Docstring for method}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Parameters
		----------`!p write_docstring_args(t[2], snip)``!p snip.rv += '\n' + snip.mkline('', indent='')`
		Returns
		-------
		$3
	"""
	${0:pass}
endsnippet

snippet @static "Custom static method definition with docstring"
@staticmethod
def ${1:method}(${2:args}) -> ${3:rettype}:
	"""
		${4:Docstring for method}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Parameters
		----------`!p write_docstring_args(t[2], snip)``!p snip.rv += '\n' + snip.mkline('', indent='')`
		Returns
		-------
		$3
	"""
	${0:pass}
endsnippet

snippet @property "Custom property method definition with docstring"
@property
def ${1:method}(self) -> ${3:rettype}:
	"""
		${4:Docstring for method}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Returns
		-------
		$3
	"""
	${0:pass}
endsnippet

snippet @class "Custom property method definition with docstring"
@classmethod
def ${1:method}(cls, ${2:args}) -> ${3:rettype}:
	"""
		${4:Docstring for method}`!p snip.rv += '\n' + snip.mkline('', indent='')`
		Parameters
		----------`!p write_docstring_args(t[2], snip)``!p snip.rv += '\n' + snip.mkline('', indent='')`
		Returns
		-------
		$3
	"""
	${0:pass}
endsnippet
